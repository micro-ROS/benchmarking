#!/bin/sh

RED="\e[31m"
RESET="\e[0m"
GREEN="\e[92m"
YELLOW="\e[93m"

git_retrieve()
{
	if [ $# -ne 3 ]; then
		printf "${RED}Not enought param ${RESET}\n"
		return	
	fi

	if [ -e $2 ]; then
		rm -rf $2
	fi

	git clone $1 $2
	cd $2
	git checkout $3

	if [ $? -eq 0 ]; then
		touch .stamp_downloaded
	fi

	cd ..
}

autotoolized_src()
{
	local src_dir=${1}
	shift
	local fname=${1}
	shift
	local src_files=$@

	if [ -e ${src_dir}/.stamp_autoolized ]; then
		return
	fi

	./autotoolize ${src_dir} ${fname} ${src_files}

	if [ $? -eq 0 ]; then
		touch ${src_dir}/.stamp_autoolized
	fi
}

apply_patches()
{
	local DEST=${1}
	shift
	local LIST_PATCHES=$@ 

	echo "PATCHED $LIST_PATCHES"
	cd $DEST
	
	for i in $LIST_PATCHES; do
		echo  "Applying patch $i"
 		patch -p1 <  ../$i
	done

	if [ $? -ne 0 ]; then
	       printf "${RED} ${file}: ${filename}_applying_patch did not succeed${RESET}\n"
	else 
		touch .stamp_patched
        fi

	cd ..
}


recipes=$(find . -maxdepth 1 -iname "*.mk")

for file in $recipes 
do
	. ${file}
	filename="${file##*/}"
	filename="${filename%.*}"

	printf "\n${GREEN}===> Processing packet $file ${RESET}\n\n"

	git_addr=$(eval echo \$"${filename}_git")
	if [ -z $git_addr ]; then
	       printf "${RED} In ${file}: ${filename}_git var does not exits ${RESET}\n"
	       continue
        fi

	git_src_dir=$(eval echo \$"${filename}_src_dir")
	if [ -z $git_src_dir ]; then
	       printf "${RED} In ${file}: ${filename}_src_dir does not exits ${RESET}\n"
	       continue
        fi

	git_version=$(eval echo \$"${filename}_version")
	if [ -z $git_version ]; then
	       printf "${RED}In ${file}: ${filename}_version does not exits ${RESET}\n"
	       continue
        fi

	build_cmd=$(eval echo \$"${filename}_build_cmd")
	if [ -z $git_version ]; then
	       printf "${RED}In ${file}: ${filename}_build_cmd does not exits ${RESET}\n"
	       continue
        fi

	if [ ! -e $git_src_dir/.stamp_downloaded ]; then
		git_retrieve $git_addr $git_src_dir $git_version
	else 
		printf "${YELLOW} ${file}: Already got sources. " 
		printf	"If you want to redownload it delete .stamp_download${RESET}\n"
	fi


	if [ -e $git_src_dir/.stamp_built ]; then
		printf "${YELLOW} ${file}: Already got sources. " 
		printf	"If you want to rebuild it delete .stamp_built${RESET}\n"
		continue
	fi

	autotoolize_cmd=$(eval echo \$"${filename}_need_autotoolize")
	if [ ! -z $autotoolize_cmd ]; then
		if [ $autotoolize_cmd -eq 1 ]; then
			autotoolize_src_files=$(eval echo \$"${filename}_source_files")
			autotoolized_src  $git_src_dir $filename $autotoolize_src_files
		fi
	fi

	list_patches=$(eval echo \$"${filename}_patches")
	if [ ! -e $git_src_dir/.stamp_patched ]; then
		if [ ! -z $list_patches ]; then
			apply_patches $git_src_dir $list_patches
		fi
	else 
		printf "${YELLOW} ${file}: sources already patched " 
		printf	"If you want to force patching delete .stamp_patched${RESET}\n"
	fi

	cd $git_src_dir
	eval $build_cmd
	if [ $? -ne 0 ]; then
	       printf "${RED} ${file}: ${filename}_build_cmd did not succeed${RESET}\n"
	       exit 255
        fi

	touch .stamp_built
	cd ..
done

printf "\n******Done getting packets******\n"

